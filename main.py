import os
import time
import random
import json
from datetime import datetime, timedelta

import requests
import gspread
from gspread.exceptions import APIError, WorksheetNotFound
from oauth2client.service_account import ServiceAccountCredentials

# =========================
# –ö–æ–Ω—Ñ–∏–≥ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# =========================
SOURCE_SHEET_ID = os.environ.get("SOURCE_SHEET_ID")
TARGET_SHEET_ID = os.environ.get("TARGET_SHEET_ID")

if not SOURCE_SHEET_ID or not TARGET_SHEET_ID:
    raise ValueError("SOURCE_SHEET_ID –∏/–∏–ª–∏ TARGET_SHEET_ID –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# =========================
# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google Sheets
# =========================
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.environ.get("GOOGLE_CREDS_JSON")
if not creds_json:
    raise ValueError("GOOGLE_CREDS_JSON not set or empty!")

creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

# =========================
# –£—Ç–∏–ª–∏—Ç—ã —Ä–µ—Ç—Ä–∞–µ–≤ –¥–ª—è Google API
# =========================
RETRYABLE_HTTP = {429, 500, 502, 503, 504}

def _sleep_backoff(attempt: int, base: float = 1.6, cap: float = 30.0):
    wait = min(cap, (base ** (attempt - 1))) + random.uniform(0, 0.9)
    print(f"‚è≥ Retry backoff: {wait:.1f}s")
    time.sleep(wait)

def _is_retryable_apierror(e: APIError) -> bool:
    try:
        code = getattr(e.response, "status_code", None)
        return code in RETRYABLE_HTTP
    except Exception:
        return False

def retry_call(fn, *args, retries: int = 5, **kwargs):
    for attempt in range(1, retries + 1):
        try:
            return fn(*args, **kwargs)
        except APIError as e:
            code = getattr(e.response, "status_code", None)
            if _is_retryable_apierror(e) and attempt < retries:
                print(f"‚ö†Ô∏è Google API {code} ‚Äî –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}, –ø–æ–≤—Ç–æ—Ä—è–µ–º‚Ä¶")
                _sleep_backoff(attempt)
                continue
            print(f"üõë Google API error (code={code}): {e}")
            raise
        except requests.RequestException as e:
            if attempt < retries:
                print(f"‚ö†Ô∏è Network error talking to Google API: {e} ‚Äî –ø–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}, –ø–æ–≤—Ç–æ—Ä—è–µ–º‚Ä¶")
                _sleep_backoff(attempt)
                continue
            raise

def open_spreadsheet_by_key_safe(gc: gspread.Client, key: str):
    return retry_call(gc.open_by_key, key)

def get_worksheet_safe(spreadsheet: gspread.Spreadsheet, title: str):
    try:
        return retry_call(spreadsheet.worksheet, title)
    except WorksheetNotFound:
        return retry_call(spreadsheet.add_worksheet, title=title, rows="1000", cols="26")

def worksheet_clear_safe(ws: gspread.Worksheet):
    return retry_call(ws.clear)

def worksheet_update_safe(ws: gspread.Worksheet, rows):
    # –ü—Ä–∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –æ–±—ä—ë–º–∞—Ö –º–æ–∂–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –ø–æ —á–∞–Ω–∫–∞–º, –Ω–æ update –æ–±—ã—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.
    return retry_call(ws.update, rows)

# =========================
# –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤/–∫–∞–±–∏–Ω–µ—Ç–æ–≤
# =========================
source_book = open_spreadsheet_by_key_safe(client, SOURCE_SHEET_ID)
source_sheet = source_book.sheet1
rows = retry_call(source_sheet.get_all_values)
data = [{"token": row[0], "cabinet": row[1]} for row in rows[1:] if len(row) >= 2 and row[0].strip()]

# =========================
# –í—ã–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤ WB
# =========================
def fetch_orders(token: str, days: int = 14):
    """
    –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ lastChangeDate. –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç 1 req/min.
    –°—Ç–∞–±–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ-JSON –æ—Ç–≤–µ—Ç—ã (WAF/503/HTML), –Ω–µ –¥–≤–∏–≥–∞—è –∫—É—Ä—Å–æ—Ä.
    """
    url = "https://statistics-api.wildberries.ru/api/v1/supplier/orders"
    headers = {
        "accept": "application/json",
        "Authorization": token,  # –¥–ª—è WB statistics-api ‚Äî –±–µ–∑ Bearer
        "User-Agent": "Mozilla/5.0 (compatible; WBFetcher/1.0; +https://github.com/yourrepo)"
    }

    date_from = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%dT00:00:00")
    all_rows = []
    next_date_from = date_from
    page = 1

    max_decode_retries = 3   # –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –ø—É—Å—Ç–æ–º/–Ω–µ-JSON –æ—Ç–≤–µ—Ç–µ —Å 200
    base_sleep = 60          # –±–∞–∑–æ–≤–∞—è –ø–∞—É–∑–∞ (–ª–∏–º–∏—Ç 1 req/min)
    max_http_retries = 3     # –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ 429/5xx

    while True:
        attempt = 0
        while True:
            attempt += 1
            print(f"üì° [{page}] –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤: dateFrom={next_date_from} (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
            try:
                resp = requests.get(url, headers=headers, params={"dateFrom": next_date_from}, timeout=60)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e} ‚Äî –∂–¥—ë–º {base_sleep}s –∏ –ø–æ–≤—Ç–æ—Ä–∏–º.")
                time.sleep(base_sleep)
                if attempt >= max_http_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã —Å–µ—Ç–∏. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫–∞–±–∏–Ω–µ—Ç—É.")
                    return all_rows
                continue

            if resp.status_code in (429, 500, 502, 503, 504):
                wait = base_sleep * min(attempt, 4)
                print(f"‚ö†Ô∏è HTTP {resp.status_code}. –ñ–¥—ë–º {wait}s –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –§—Ä–∞–≥–º–µ–Ω—Ç: {resp.text[:200]}")
                time.sleep(wait)
                if attempt >= max_http_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ 429/5xx. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫–∞–±–∏–Ω–µ—Ç—É.")
                    return all_rows
                continue

            if resp.status_code == 401:
                print("‚ùå 401 Unauthorized ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ statistics-api. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç.")
                return all_rows

            if resp.status_code != 200:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ {resp.status_code}. –¢–µ–ª–æ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç): {resp.text[:300]}")
                time.sleep(base_sleep)
                if attempt >= max_http_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –Ω–µ-200. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫–∞–±–∏–Ω–µ—Ç—É.")
                    return all_rows
                continue

            ctype = (resp.headers.get("Content-Type") or "").lower()
            body = resp.text or ""
            if ("application/json" not in ctype) or (not body.strip()):
                print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª–∏ JSON, –ø–æ–ª—É—á–∏–ª–∏ Content-Type='{ctype}', len={len(body)}. –§—Ä–∞–≥–º–µ–Ω—Ç: {body[:200]}")
                time.sleep(base_sleep)
                if attempt >= max_decode_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫–∞–±–∏–Ω–µ—Ç—É.")
                    return all_rows
                continue

            try:
                chunk = resp.json()
            except Exception as e:
                print(f"‚ö†Ô∏è JSONDecodeError: {e}. –§—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–ª–∞: {body[:200]}")
                time.sleep(base_sleep)
                if attempt >= max_decode_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫–∞–±–∏–Ω–µ—Ç—É.")
                    return all_rows
                continue

            if not isinstance(chunk, list):
                print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª–∏ –º–∞—Å—Å–∏–≤, –ø–æ–ª—É—á–∏–ª–∏ {type(chunk)}. –§—Ä–∞–≥–º–µ–Ω—Ç: {str(chunk)[:200]}")
                time.sleep(base_sleep)
                if attempt >= max_decode_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫–∞–±–∏–Ω–µ—Ç—É.")
                    return all_rows
                continue

            # –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
            break

        if not chunk:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–±—Ä–∞–Ω—ã.")
            break

        all_rows.extend(chunk)
        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(chunk)}, –≤—Å–µ–≥–æ: {len(all_rows)}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π dateFrom
        try:
            next_date_from = chunk[-1]["lastChangeDate"]
        except Exception:
            print("‚ö†Ô∏è –í –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç lastChangeDate ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
            break

        page += 1
        print(f"‚è≥ –ü–∞—É–∑–∞ {base_sleep}s (–ª–∏–º–∏—Ç API 1 req/min)‚Ä¶")
        time.sleep(base_sleep)

    return all_rows

# =========================
# –ó–∞–ø–∏—Å—å –≤ Google Sheets
# =========================
def write_orders_to_sheet(sheet_obj: gspread.Spreadsheet, cabinet_name: str, orders: list):
    try:
        ws = get_worksheet_safe(sheet_obj, cabinet_name)

        if not orders:
            # –ù–µ –∑–∞—Ç–∏—Ä–∞–µ–º –ª–∏—Å—Ç, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ª–æ–≥.
            print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –¥–ª—è '{cabinet_name}' –Ω–µ—Ç. –õ–∏—Å—Ç –Ω–µ –∏–∑–º–µ–Ω—ë–Ω.")
            return

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–æ–≥–æ –≤ –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –ø—Ä–∏—à–ª–∏ —Å API
        headers = list(orders[0].keys())

        # –ì–æ—Ç–æ–≤–∏–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ
        rows = [headers]
        for order in orders:
            row = [order.get(h, "") for h in headers]
            rows.append(row)

        # –¢–µ–ø–µ—Ä—å –æ—á–∏—â–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—Ç–æ–º–∞—Ä–Ω–æ
        worksheet_clear_safe(ws)
        worksheet_update_safe(ws, rows)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –≤ –ª–∏—Å—Ç '{cabinet_name}'")

    except Exception as e:
        print(f"üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç '{cabinet_name}': {e}")

# =========================
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# =========================
def main():
    target_sheet = open_spreadsheet_by_key_safe(client, TARGET_SHEET_ID)

    for entry in data:
        cabinet = entry["cabinet"]
        token = entry["token"]
        print(f"\nüîÑ –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º: {cabinet}")

        orders = fetch_orders(token, days=14)
        write_orders_to_sheet(target_sheet, cabinet, orders)

        # –ß—É—Ç—å —Ä–∞–∑–≥—Ä—É–∑–∏–º API –º–µ–∂–¥—É –∫–∞–±–∏–Ω–µ—Ç–∞–º–∏
        time.sleep(2)

if __name__ == "__main__":
    main()
