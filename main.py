import os
import time
import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
from datetime import datetime, timedelta

# üß™ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è GitHub Secrets)
SOURCE_SHEET_ID = os.environ.get("SOURCE_SHEET_ID")
TARGET_SHEET_ID = os.environ.get("TARGET_SHEET_ID")

# ‚öôÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.environ.get("GOOGLE_CREDS_JSON")
if not creds_json:
    raise ValueError("GOOGLE_CREDS_JSON not set or empty!")

creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

# üìë –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
source_sheet = client.open_by_key(SOURCE_SHEET_ID).sheet1
rows = source_sheet.get_all_values()[1:]
data = [{"token": row[0], "cabinet": row[1]} for row in rows if len(row) >= 2 and row[0].strip()]

# üì° –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
def fetch_orders(token, days=14):
    url = "https://statistics-api.wildberries.ru/api/v1/supplier/orders"
    headers = {
        "accept": "application/json",
        "Authorization": token,  # –¥–ª—è WB statistics-api ‚Äî –±–µ–∑ Bearer
        "User-Agent": "Mozilla/5.0 (compatible; WBFetcher/1.0; +https://github.com/yourrepo)"
    }

    date_from = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%dT00:00:00")
    all_rows = []
    next_date_from = date_from
    page = 1

    # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤
    max_decode_retries = 3          # –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –ø—É—Å—Ç–æ–º/–Ω–µ-JSON –æ—Ç–≤–µ—Ç–µ —Å 200
    base_sleep = 60                 # –±–∞–∑–æ–≤–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ª–∏–º–∏—Ç–∞ (1 req/min)
    max_http_retries = 3            # –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–∏ 429/5xx

    while True:
        attempt = 0
        while True:
            attempt += 1
            print(f"üì° [{page}] –ó–∞–ø—Ä–æ—Å –∑–∞–∫–∞–∑–æ–≤: dateFrom={next_date_from} (–ø–æ–ø—ã—Ç–∫–∞ {attempt})")
            try:
                resp = requests.get(url, headers=headers, params={"dateFrom": next_date_from}, timeout=60)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e} ‚Äî –∂–¥—ë–º {base_sleep}s –∏ –ø–æ–≤—Ç–æ—Ä–∏–º.")
                time.sleep(base_sleep)
                if attempt >= max_http_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã —Å–µ—Ç–∏. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                    return all_rows
                continue

            # —Ö—ç–Ω–¥–ª–∏–Ω–≥ –ª–∏–º–∏—Ç–æ–≤/–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if resp.status_code in (429, 500, 502, 503, 504):
                wait = base_sleep * min(attempt, 4)
                print(f"‚ö†Ô∏è HTTP {resp.status_code}. –ñ–¥—ë–º {wait}s –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É. –§—Ä–∞–≥–º–µ–Ω—Ç: {resp.text[:200]}")
                time.sleep(wait)
                if attempt >= max_http_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ 429/5xx. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                    return all_rows
                continue

            if resp.status_code == 401:
                print("‚ùå 401 Unauthorized ‚Äî —Ç–æ–∫–µ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ statistics-api. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–±–∏–Ω–µ—Ç.")
                return all_rows

            if resp.status_code != 200:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ {resp.status_code}. –¢–µ–ª–æ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç): {resp.text[:300]}")
                # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –Ω–µ –¥–≤–∏–≥–∞–µ–º dateFrom –∏ –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä
                time.sleep(base_sleep)
                if attempt >= max_http_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –Ω–µ-200. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                    return all_rows
                continue

            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —ç—Ç–æ JSON –∏ –Ω–µ –ø—É—Å—Ç–æ–µ —Ç–µ–ª–æ
            ctype = (resp.headers.get("Content-Type") or "").lower()
            body = resp.text or ""
            if ("application/json" not in ctype) or (not body.strip()):
                # –±—ã–≤–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ WAF —Å 200
                print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª–∏ JSON, –ø–æ–ª—É—á–∏–ª–∏ Content-Type='{ctype}', len={len(body)}. –§—Ä–∞–≥–º–µ–Ω—Ç: {body[:200]}")
                time.sleep(base_sleep)
                if attempt >= max_decode_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                    return all_rows
                continue

            # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                chunk = resp.json()
            except Exception as e:
                print(f"‚ö†Ô∏è JSONDecodeError: {e}. –§—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–ª–∞: {body[:200]}")
                time.sleep(base_sleep)
                if attempt >= max_decode_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                    return all_rows
                continue

            if not isinstance(chunk, list):
                print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–ª–∏ –º–∞—Å—Å–∏–≤, –ø–æ–ª—É—á–∏–ª–∏ {type(chunk)}. –§—Ä–∞–≥–º–µ–Ω—Ç: {str(chunk)[:200]}")
                time.sleep(base_sleep)
                if attempt >= max_decode_retries:
                    print("üõë –ü—Ä–µ–≤—ã—à–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—ã –∏–∑-–∑–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                    return all_rows
                continue

            # –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ–ø—ã—Ç–æ–∫
            break

        if not chunk:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ–±—Ä–∞–Ω—ã.")
            break

        all_rows.extend(chunk)
        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(chunk)}, –≤—Å–µ–≥–æ: {len(all_rows)}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π dateFrom
        try:
            next_date_from = chunk[-1]["lastChangeDate"]
        except Exception:
            print("‚ö†Ô∏è –í –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç lastChangeDate ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.")
            break

        page += 1
        # —Å–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç
        print(f"‚è≥ –ü–∞—É–∑–∞ {base_sleep}s (–ª–∏–º–∏—Ç API 1 req/min)...")
        time.sleep(base_sleep)

    return all_rows


# üìä –ó–∞–ø–∏—Å—å –∑–∞–∫–∞–∑–æ–≤ –≤ Google Sheets
def write_orders_to_sheet(sheet_obj, cabinet_name, orders):
    try:
        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ—á–∏—â–∞–µ–º –ª–∏—Å—Ç
        try:
            worksheet = sheet_obj.worksheet(cabinet_name)
            worksheet.clear()
        except gspread.exceptions.WorksheetNotFound:
            worksheet = sheet_obj.add_worksheet(title=cabinet_name, rows="1000", cols="20")

        if not orders:
            worksheet.update([["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"]])
            print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –¥–ª—è '{cabinet_name}' –Ω–µ—Ç.")
            return

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –ø—Ä–∏—à–ª–∏
        headers = list(orders[0].keys())
        rows = [headers]

        for order in orders:
            row = [order.get(h, "") for h in headers]
            rows.append(row)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        worksheet.update(rows)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –≤ –ª–∏—Å—Ç '{cabinet_name}'")

    except Exception as e:
        print(f"üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç '{cabinet_name}': {e}")


# üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    target_sheet = client.open_by_key(TARGET_SHEET_ID)

    for entry in data:
        cabinet = entry["cabinet"]
        token = entry["token"]
        print(f"\nüîÑ –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º: {cabinet}")

        orders = fetch_orders(token, days=14)
        write_orders_to_sheet(target_sheet, cabinet, orders)


if __name__ == "__main__":
    main()
